grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 0.5
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
Y
hist(y)
hist(Y)
plot(density(Y))
plot(density(X))
plot(density(log(X)))
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
rm(list = ls())
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
horse_data
?force
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 5000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
Y
hist(Y)
rate <- decay_scheduler(gamma1 = 0.0004, K = 100)
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.0004, K = 100)
rate
beta <- vector("list", N)
beta
initpar <- c(1,-0.3, -0.2, 1,1)
beta[[1]] <- initpar
beta
beta[[1]]
initpar <- c(1,-0.3, -0.2, 1.1)
beta[[1]]
beta[[1]] <- initpar
beta[[1]]
initpar
beta
Y[1]
grad(X[1], alpha0, beta0, gamma0, rho0)
rate(1)*grad(X[1], alpha0, beta0, gamma0, rho0)
beta[[1]]-rate(1)*grad(X[1], alpha0, beta0, gamma0, rho0)
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
initpar
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 5000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
rm(list = ls())
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 5000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.0004, K = 100)
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
for (i in 2:N){
beta[[i]] <- beta[[i-1]] + rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
grad(X, -10:10, beta0, gamma0, rho0)
dummy <- seq(-10,10, by = 0.05)
fordummy
dummy
for (i in seq_along(dummy)){
print(i)
}
dummy <- seq(-10,10, length.out = 200)
for (i in seq_along(dummy)){
print(i)
}
print(dummy[i])
for (i in seq_along(dummy)){
print(dummy[i])
}
for (i in seq_along(dummy)){
alpha_col <- grad(X, dummy[i], beta0, gamma0, rho0)
beta_col <- grad(X, alpha0, dummy[i], gamma0, rho0)
gamma_col <- grad(X, alpha0, beta0, dummy[i], rho0)
rho_col <- grad(X, alpha0, beta0, gamma0, dummy[i])
tester <- tibble(alpa = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
}
tester
dummy
for (i in seq_along(dummy)){
print(i)
alpha_col <- grad(X, dummy[i], beta0, gamma0, rho0)
beta_col <- grad(X, alpha0, dummy[i], gamma0, rho0)
gamma_col <- grad(X, alpha0, beta0, dummy[i], rho0)
rho_col <- grad(X, alpha0, beta0, gamma0, dummy[i])
tester <- tibble(alpa = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
}
print(dummy[i])
for (i in seq_along(dummy)){
print(i)
print(dummy[i])
alpha_col <- grad(X, dummy[i], beta0, gamma0, rho0)
beta_col <- grad(X, alpha0, dummy[i], gamma0, rho0)
gamma_col <- grad(X, alpha0, beta0, dummy[i], rho0)
rho_col <- grad(X, alpha0, beta0, gamma0, dummy[i])
tester <- tibble(alpa = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
}
alpha_col <- numeric(200)
beta_col <- numeric(200)
gamma_col <- numeric(200)
rho_col <- numeric(200)
for (i in seq_along(dummy)){
alpha_col[i] <- grad(X, dummy[i], beta0, gamma0, rho0)
beta_col[i] <- grad(X, alpha0, dummy[i], gamma0, rho0)
gamma_col[i] <- grad(X, alpha0, beta0, dummy[i], rho0)
rho_col[i] <- grad(X, alpha0, beta0, gamma0, dummy[i])
}
tester <- tibble(alpha = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
grad(X, alpha0, beta0, dummy[i], rho0)
grad(X, dummy[1], beta0, gamma0, rho0)[1]
alpha_col <- numeric(200)
beta_col <- numeric(200)
gamma_col <- numeric(200)
rho_col <- numeric(200)
for (i in seq_along(dummy)){
alpha_col[i] <- grad(X, dummy[i], beta0, gamma0, rho0)[1]
beta_col[i] <- grad(X, alpha0, dummy[i], gamma0, rho0)[2]
gamma_col[i] <- grad(X, alpha0, beta0, dummy[i], rho0)[3]
rho_col[i] <- grad(X, alpha0, beta0, gamma0, dummy[i])[4]
}
tester <- tibble(alpha = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
tester
tester %>% view()
tester <- tibble(inp = dummy, alpha = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
tester
tester %>% filter(X %in% c(0.5, 0.3, 0.1, 1.5))
tester %>% filter(inp %in% c(0.5, 0.3, 0.1, 1.5))
dummy <- seq(-10,10, by = 0.5)
dummy
length(dummy)
alpha_col <- numeric(41)
beta_col <- numeric(41)
gamma_col <- numeric(41)
rho_col <- numeric(41)
for (i in seq_along(dummy)){
alpha_col[i] <- grad(X, dummy[i], beta0, gamma0, rho0)[1]
beta_col[i] <- grad(X, alpha0, dummy[i], gamma0, rho0)[2]
gamma_col[i] <- grad(X, alpha0, beta0, dummy[i], rho0)[3]
rho_col[i] <- grad(X, alpha0, beta0, gamma0, dummy[i])[4]
}
tester <- tibble(inp = dummy, alpha = alpha_col, beta = beta_col, gamma = gamma_col, rho = rho_col)
tester
tester %>% view()
beta
beta[[1]]
beta[[1]][1]
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
beta
beta[[1]] <- initpar
beta
beta[[1]][1:4]
beta[[1]]
rate(1)
rate(1:10)
X[2-1]
X[0]
X[1]
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:N){
print(beta[[i-1]][1])
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:10){
print(beta[[i-1]][1])
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:10){
print(beta[[i-1]][1])
print(i)
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:10){
print(i)
print(beta[[i-1]][1])
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
beta <- vector("list", N)
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
for (i in 2:10){
print(i)
print(glue("alpha: ", beta[[i-1]][1]))
print(glue("beta: ", beta[[i-1]][2]))
print(glue("gamma: ", beta[[i-1]][3]))
print(glue("rho: ", beta[[i-1]][4]))
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
grad(X[7-1], beta[[i-1]][1],glue
glue
glue
library(tidyverse)
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
2+2
for (i in 2:10){
print(i)
print(glue("alpha: ", beta[[i-1]][1]))
print(glue("beta: ", beta[[i-1]][2]))
print(glue("gamma: ", beta[[i-1]][3]))
print(glue("rho: ", beta[[i-1]][4]))
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
for (i in 2:10){
print(i)
print(glue::glue("alpha: ", beta[[i-1]][1]))
print(glue::glue("beta: ", beta[[i-1]][2]))
print(glue::glue("gamma: ", beta[[i-1]][3]))
print(glue::glue("rho: ", beta[[i-1]][4]))
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i-1], beta[[i-1]][1],
beta[[i-1]][2],
beta[[i-1]][3],
beta[[i-1]][4])
}
