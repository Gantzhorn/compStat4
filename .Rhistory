time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N)
# Comparison of SGD's vs gradient descent
par_init <- c(100, 1000, 5000, 10000, 25000, 50000, 75000, 100000)
errorpath_batch <- vector("list", length(par_init))
errorpath_mini <- vector("list", length(par_init))
errorpath_deter <- vector("list", length(par_init))
set.seed(1)
for(i in seq_along(par_init)){
N <- par_init[i]
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
deter_tracer <- CSwR::tracer(c("par"), N = 0)
mini_SG_tracer <- CSwR::tracer("par", N = 0)
batch_SG_tracer <- CSwR::tracer("par", N = 0)
SG_mini(initpar, N = N, gamma = rate, cb = mini_SG_tracer$tracer, maxiter = 200)
errorpath_mini[[i]] <- summary(mini_SG_tracer) %>% tibble(., N = N, type = "minibatch")
mini_SG_tracer$clear()
SG(initpar, N = N, gamma = rate, cb = batch_SG_tracer$tracer, maxiter = 200)
errorpath_batch[[i]] <- summary(batch_SG_tracer) %>% tibble(., N = N, type = "basicbatch")
batch_SG_tracer$clear()
gradient_descent(initpar, gamma = rate, cb = deter_tracer$tracer, maxiter = 200)
errorpath_deter[[i]] <- summary(deter_tracer) %>% tibble(., N = N, type = "Deterministic")
deter_tracer$clear()
}
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N, scales = "free")
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N)
?facet_wrap
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N,ncol = 2)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_point(size = 1) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_smooth(size = 1) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .6) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = 1.5) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12)) +
scale_y_continuous(breaks = seq(-3,6, by = 3))
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
options(digits = 10)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
options(digits = 15)
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4, labeller = par_init) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
par_init
# Batch stochastic gradient algorithm
# Simulation
N <- 50000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 500,
sampler = sample,
cb = NULL,
epsilon = 1e-6,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
par0 <- par
i <- samp[j]
par <- par0 - gamma[k] * grad_calc(X[i], Y[i], par0[1], par0[2], par0[3], par0[4])
if(sum((par-par0)^2)<epsilon) break
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = N,
gamma = rate,
cb = loglogis_SG_tracer$tracer)
# Plot estimates against true values and initial values
initpar_tibble <- tibble(initpar = initpar, Parameter = c("alpha", "beta", "gamma", "rho"))
summary(loglogis_SG_tracer) %>% as_tibble() %>% rename("alpha" = par.1, "beta" = par.2, "gamma" = par.3, "rho" = par.4, "time" = .time) %>%
pivot_longer(cols = -time, names_to = "Parameter", values_to = "Estimate") %>%
ggplot(aes(x = time, y = Estimate, col = Parameter)) + geom_line(size = 1) +
geom_hline(data = trueval_tibble, aes(yintercept = Value, col = Parameter), linetype = "dashed", size = 1) +
theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text.x = element_text(face = "bold", size = 12))
# # Convergence for different starting values of alpha, beta
# loglogis_SG_tracer <- tracer("par", N = 0)
#
#
# par_init <- expand.grid(
#   alpha = c(-4,-2, 0, 1, 1.5, 2, 5, 8),
#   beta = c(-4, -2, -0.5, 0.5, 2, 4, 8)
# ) %>% as.matrix()
#
#
# set.seed(1)
#
# paths <- vector("list", nrow(par_init))
#
# for(i in 1:nrow(par_init)){
#   SG(c(par_init[i,1], par_init[i,2], initpar[3], initpar[4]),
#      N = N,
#      gamma = rate,
#      cb = loglogis_SG_tracer$tracer)
#   paths[[i]] <- summary(loglogis_SG_tracer) %>% tibble(., alphainit = par_init[i,1], betainit = par_init[i,2], .name_repair = "unique")
#   loglogis_SG_tracer$clear()
# }
#
# paths_tibble <- bind_rows(paths) %>% select(-c("par....3", "par....4")) %>%
#   rename("alpha" = par.alpha, "beta" = par.beta, "time" = .time) %>%
#   mutate(alphainit = as.factor(alphainit), betainit = as.factor(betainit)) %>%
#   pivot_longer(-c(time,alphainit, betainit), names_to = "Parameter")
#
#
#
# paths_tibble %>% ggplot(aes(x = time, y = value, col = Parameter)) + geom_line(size = 1) +
#   facet_grid(betainit~alphainit) +
#   geom_hline(data = trueval_tibble[1:2,], aes(yintercept = Value, col = Parameter), linetype = "dashed") +
#   facet_grid(betainit~alphainit) +
#   theme(axis.title = element_text(face = "bold", size = 14),
#         axis.text = element_text(face = "bold", size = 12),
#         legend.title = element_text(face = "bold", size = 16),
#         legend.text = element_text(face = "bold", size =12),
#         strip.text = element_text(face = "bold", size = 12)) +
#   scale_y_continuous(breaks = seq(-3,6, by = 3))
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R")
set.seed
# Profiling
set.seed(1)
profvis::profvis(source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R"))
rbinom(10, 2, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 0.5, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 2, 0.5)
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/online_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/miniBatch_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/deterministic_gradient_descent.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/deterministic_gradient_descent.R")
# Profiling
set.seed(1)
profvis::profvis(source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R"))
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
sample(10)
Rcpp::sourceCpp("SGD rcpp.cpp")
library(RcppArmadillo)
return arma::conv_to<arma::uword>::from(
Rcpp::sourceCpp("SGD_rcpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
sample_arma(10)
sample_arma(10)
sample_arma(10)
sample_arma(c(1,1))
sample_arma(c(1,2))
sample_arma(c(1,10))
sample_arma(c(1,2))
sample_arma(c(19,2))
sample_arma(c(19,2))
sample_arma(c(19,2))
sample_arma(c(19,2))
obj_func_test <- function(param, x_inp, y_inp){
1/length(x_inp)*(sum((y_inp-densY(x_inp, param[1], param[2], param[3], param[4]))^2))
}
sample_arma(X)
X
cppFunction("NumericVector mysample(NumericVector v, int n) { return sample(v, n, true); }")
mysample(c(1,2,3,4), 10)
mysample(c(1,2,3,4))
mysample(c(1,2,3,4), 1)
int cppsample(int n){
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
Rcpp::sourceCpp("SGD_rcpp.cpp")
cppsample(1)
cppsample(45)
library(dqrng)
install.packages("dqrng")
library(dqrng)
dqrng
dqrng::sample
?dqrng::sample
?dqrng::dqsample()
sample(10, 1, replace = TRUE)
sample(10, 1, replace = TRUE)
sample(10, 10, replace = TRUE)
Rcpp::sourceCpp("SGD_rcpp.cpp")
cppsample(45)
set.seed(1)
sample(40)
cppsample(40)
set.seed(1)
cppsample(40)
?sample
# Profiling
set.seed(1)
Rcpp::sourceCpp("SGD_rcpp.cpp")
set.seed(1)
cppsample(40)
set.seed(1)
sample(40)
cppsample(40) %>% unique()
cppsample(40) %>% unique()
cppsample(40) %>% n_distinct()
set.seed(1)
sample(40)
set.seed(1)
cppsample(40)
sample(40, 40)
set.seed(1)
sample(40, 40)
cppsample(40)
set.seed(1)
cppsample(40)
cppFunction("NumericVector cpprbinom(int n, double size, double prob) { \
return(rbinom(n, size, prob)); }")
cpprbinom(10,10)
cpprbinom(10,10, 0.5)
set.seed(1)
cpprbinom(10,10, 0.5)
set.seed(1)
rbinom(10,10,0.5)
sample
cppFunction("NumericVector cppsample(int n) { \
return(sample(n,n)); }")
cppFunction("NumericVector cppsample(int n) { \
return sample(n,n)); }")
cppFunction("NumericVector cppsample(int n) { \
return sample(n,n); }")
cppFunction("NumericVector cppsample(int n) { \
return sample.int(n,n); }")
cppFunction("NumericVector cppsample(int n) { \
return sample.int(n); }")
sample.int(10)
cppFunction("NumericVector cppsample(int n) {
returnsample.int(10);}")
cppFunction("NumericVector cppsample(int n) {
return sample.int(10);}")
cppFunction("NumericVector cppsample(int n) {
return Rcpp::sample(10);}")
cppFunction("NumericVector cpprbinom(int n, double size, double prob) { \
return(rbinom(n, size, prob)); }"))
cppFunction("NumericVector cpprbinom(int n, double size, double prob) { \
return(rbinom(n, size, prob)); }")
cpprbinom(10,10, 0.5)
cppFunction("NumericVector rcppSample(int n, double size, double prob) { \
return(rbinom(n, size, prob)); }")
cppFunction("NumericVector rcppSample(int n, double size, double prob) { \
return(sample(n)); }")
sample(10)
sample(10)
sample(10)
cppFunction("Vector rcppSample(int n) { \
return(sample(n)); }")
cppFunction("Vector<RTYPE> rcppsample(const Vector<RTYPE>& x, int size, bool replace = false){
sample(Vector, size, replace)}")
cppFunction("Vector<RTYPE> rcppsample(const Vector<RTYPE>& x, int size, bool replace = false){
sample(x, size, replace)}")
cppFunction("Vector<RTYPE> rcppsample(const Vector<RTYPE>& vec, int size, bool replace = false){
sample(vec, size, replace)}")
cppFunction("Vector<RTYPE> rcppsample(Rcpp::NumericVector vec, int size, bool replace = false){
sample(vec, size, replace)}")
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(RcppArmadillo)
library(xtable)
library(dqrng)
library(numDeriv)
library(CSwR)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*x-alpha))
}
# Nonlinear least squares
#Gradient
grad_calc <- function(x, y, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_beta <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*x*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_gamma <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha))-1)
)
grad_rho <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha)))
)
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
#True parameters
alpha0 <- 1
beta0 <- 2
gamma0 <- -1
rho0 <- 0.5
trueval_tibble <- tibble(Parameter = c("alpha", "beta", "gamma", "rho"), Value = c(alpha0, beta0, gamma0, rho0))
# Sim parameters
sigma <- 0.5
omega <- 5
# Grad-test
test_points <- c(1,1)
obj_func <- function(x, y, param){
1/length(x)*(sum((y-densY(x, param[1], param[2], param[3], param[4]))^2))
}
obj_func_test <- function(param, x_inp, y_inp){
1/length(x_inp)*(sum((y_inp-densY(x_inp, param[1], param[2], param[3], param[4]))^2))
}
grad_calc(test_points[1], test_points[2], alpha0, beta0, gamma0, rho0)
numDeriv::grad(obj_func_test, x = c(alpha0, beta0, gamma0, rho0), x_inp = test_points[1], y_inp = test_points[2])
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/online_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/miniBatch_SGD.R")
source("~/Desktop/Skole/Compstat/Assignment4/compStat4/deterministic_gradient_descent.R")
# Comparison of SGD's vs gradient descent
par_init <- c(100, 1000, 5000, 10000, 25000, 50000, 75000, 100000)
errorpath_batch <- vector("list", length(par_init))
errorpath_mini <- vector("list", length(par_init))
errorpath_deter <- vector("list", length(par_init))
set.seed(1)
for(i in seq_along(par_init)){
N <- par_init[i]
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
deter_tracer <- CSwR::tracer(c("par"), N = 0)
mini_SG_tracer <- CSwR::tracer("par", N = 0)
batch_SG_tracer <- CSwR::tracer("par", N = 0)
SG_mini(initpar, N = N, gamma = rate, cb = mini_SG_tracer$tracer, maxiter = 200)
errorpath_mini[[i]] <- summary(mini_SG_tracer) %>% tibble(., N = N, type = "minibatch")
mini_SG_tracer$clear()
SG(initpar, N = N, gamma = rate, cb = batch_SG_tracer$tracer, maxiter = 200)
errorpath_batch[[i]] <- summary(batch_SG_tracer) %>% tibble(., N = N, type = "basicbatch")
batch_SG_tracer$clear()
gradient_descent(initpar, gamma = rate, cb = deter_tracer$tracer, maxiter = 200)
errorpath_deter[[i]] <- summary(deter_tracer) %>% tibble(., N = N, type = "Deterministic")
deter_tracer$clear()
}
bind_rows(errorpath_batch,
errorpath_deter,
errorpath_mini) %>%
mutate(squarederror = (par.1-alpha0)^2+(par.2-beta0)^2+(par.3-gamma0)^2+(par.4-rho0)^2,
time = .time) %>%
ggplot(aes(x = log(time), y = log(squarederror), col = type)) + geom_line(size = .9) +
facet_wrap(~N,ncol = 4, labeller = ) + theme(axis.title = element_text(face = "bold", size = 14),
axis.text = element_text(face = "bold", size = 12),
legend.title = element_text(face = "bold", size = 16),
legend.text = element_text(face = "bold", size =12),
strip.text = element_text(face = "bold", size = 12))
# Profiling
profvis::profvis(source("~/Desktop/Skole/Compstat/Assignment4/compStat4/batch_SGD.R"))
sourceCpp("SGD_rcpp.cpp")
cppsample(10)
sample(10)
cppsample(10,, 10)
cppsample(10, 10)
