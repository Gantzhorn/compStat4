Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
library(numDeriv)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*x-alpha))
}
# Nonlinear least squares
obj_func <- function(x, y, alpha, beta, gamma, rho){
1/length(x)*(sum((y-densY(x, alpha, beta, gamma, rho))^2))
}
#Gradient
grad_calc <- function(x, y, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_beta <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*x*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_gamma <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha))-1)
)
grad_rho <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha)))
)
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
#True parameters
alpha0 <- 1
beta0 <- 5
gamma0 <- 5
rho0 <- 2
# Grad-test
test_points <- c(1,5)
obj_func_test <- function(inp){
1/length(test_points[1])*(sum((test_points[2]-densY(test_points[1], inp[1], inp[2], inp[3], inp[4]))^2))
}
grad_calc(test_points[1], test_points[2], alpha0, beta0, gamma0, rho0)
numDeriv::grad(obj_func_test, x = c(alpha0, beta0, gamma0, rho0))
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.1, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 10000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0, beta0, gamma0, rho0)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
initpar <- c(alpha0+0.1, beta0-0.1, gamma0-0.1, rho0+0.1)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.1, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 10000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+0.1, beta0-0.1, gamma0-0.1, rho0+0.1)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.3, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+0.1, beta0-0.1, gamma0-0.1, rho0+0.1)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+0.1, beta0-0.1, gamma0-0.1, rho0+0.1)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
last(par)
par
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
library(numDeriv)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*x-alpha))
}
# Nonlinear least squares
obj_func <- function(x, y, alpha, beta, gamma, rho){
1/length(x)*(sum((y-densY(x, alpha, beta, gamma, rho))^2))
}
#Gradient
grad_calc <- function(x, y, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_beta <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*x*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_gamma <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha))-1)
)
grad_rho <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha)))
)
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
#True parameters
alpha0 <- 1
beta0 <- 2
gamma0 <- 5
rho0 <- 2
# Grad-test
test_points <- c(1,5)
obj_func_test <- function(inp){
1/length(test_points[1])*(sum((test_points[2]-densY(test_points[1], inp[1], inp[2], inp[3], inp[4]))^2))
}
grad_calc(test_points[1], test_points[2], alpha0, beta0, gamma0, rho0)
numDeriv::grad(obj_func_test, x = c(alpha0, beta0, gamma0, rho0))
alpha0 <- 1
beta0 <- 2
gamma0 <- 5
rho0 <- 2
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
library(numDeriv)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*x-alpha))
}
# Nonlinear least squares
obj_func <- function(x, y, alpha, beta, gamma, rho){
1/length(x)*(sum((y-densY(x, alpha, beta, gamma, rho))^2))
}
#Gradient
grad_calc <- function(x, y, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_beta <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
((gamma-rho)*x*exp(beta*x-alpha))/((exp(beta*x-alpha)+1)^2)
)
grad_gamma <- 2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha))-1)
)
grad_rho <- -2/N*sum(
(y-gamma+(gamma-rho)/(1+exp(beta*x-alpha)))*
(1/(1+exp(beta*x-alpha)))
)
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
#True parameters
alpha0 <- 1
beta0 <- 2
gamma0 <- 5
rho0 <- 2
# Grad-test
test_points <- c(1,5)
obj_func_test <- function(inp){
1/length(test_points[1])*(sum((test_points[2]-densY(test_points[1], inp[1], inp[2], inp[3], inp[4]))^2))
}
grad_calc(test_points[1], test_points[2], alpha0, beta0, gamma0, rho0)
numDeriv::grad(obj_func_test, x = c(alpha0, beta0, gamma0, rho0))
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+0.1, beta0-0.1, gamma0-0.1, rho0+0.1)
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
initpar <- c(alpha0+runif(1,-1,1), beta0-0.1, gamma0-0.1, rho0+0.1)
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 2
sigma <- 0.1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+runif(1,-1,1), beta0+runif(1,-1,1), gamma0+runif(1,-1,1), rho0+runif(1,-1,1))
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
par
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 4
sigma <- 1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+runif(1,-1,1), beta0+runif(1,-1,1), gamma0+runif(1,-1,1), rho0+runif(1,-1,1))
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 4
sigma <- 4
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+runif(1,-1,1), beta0+runif(1,-1,1), gamma0+runif(1,-1,1), rho0+runif(1,-1,1))
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
omega <- 4
sigma <- 0.1
max_iter <- 5000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
error <- numeric(max_iter)
initpar <- c(alpha0+runif(1,-1,1), beta0+runif(1,-1,1), gamma0+runif(1,-1,1), rho0+runif(1,-1,1))
par[1, ] <- initpar
for (i in 2:max_iter){
print(glue::glue(i, ": "))
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
obj_func
# Grad-test
test_points <- c(1,1)
obj_func <- function(inp){
1/length(test_points[1])*(sum((test_points[2]-densY(test_points[1], inp[1], inp[2], inp[3], inp[4]))^2))
}
grad_calc(test_points[1], test_points[2], alpha0, beta0, gamma0, rho0)
numDeriv::grad(obj_func, x = c(alpha0, beta0, gamma0, rho0))
