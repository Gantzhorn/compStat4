Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:1){
print(i)
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
res <- SG(initpar, N, rate)
res
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
print(i)
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
res <- SG(initpar, N, rate)
res
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
loglogis_SG_tracer <- tracer("par", N = 0)
loglogis_SG_tracer
loglogis_SG_tracer$tracer()
loglogis_SG_tracer <- tracer("par", N = 0)
SG(initpar,
N,
gamma = rate,
maxiter = 1000,
cb = loglogis_SG_tracer$tracer)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 1000,
cb = loglogis_SG_tracer$tracer)
res
loglogis_SG_tracer$tracer
loglogis_SG_tracer$tracer()
loglogis_SG_tracer
loglogis_SG_tracer$par
loglogis_SG_tracer
loglogis_SG_tracer
loglogis_SG_tracer["par"]
typeof(loglogis_SG_tracer$tracer)
typeof(loglogis_SG_tracer)
logllogis_SG_tracer
loglogis_SG_tracer["par"]
loglogis_SG_tracer
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.5, K = 100)
# Online learning
omega <- 2
sigma <- 0.1
max_iter <- 20000
par <- numeric(max_iter*4)
dim(par) <- c(max_iter, 4)
initpar <- c(alpha0+runif(1,-1,1), beta0+runif(1,-1,1), gamma0+runif(1,-1,1), rho0+runif(1,-1,1))
par[1, ] <- initpar
for (i in 2:max_iter){
# Simulate online data
X <- rnorm(1, mean = 0, sd = omega)
epsilon <- rnorm(1, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
par[i, ] <- par[(i-1), ] - rate(i) * grad_calc(X, Y, par[(i-1), 1],
par[(i-1), 2],
par[(i-1), 3],
par[(i-1), 4])
}
par
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 1]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = alpha0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 2]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = beta0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 3]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = gamma0, col = "red")
ggplot(tibble(x = seq_along(par[, 1]), y = par[, 4]), aes(x = x, y = y)) + geom_line() + geom_hline(yintercept = rho0, col = "red")
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
loglogis_SG_tracer <- tracer("par", N = 0)
summary(loglogis_SG_tracer$tracer)
summary(loglogis_SG_tracer)
summary(loglogis_SG_tracer)
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 1000,
cb = loglogis_SG_tracer$tracer)
summary(loglogis_SG_tracer)
summary(loglogis_SG_tracer) %>% view()
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
print(par)
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 1000,
cb = loglogis_SG_tracer$tracer)
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 10,
cb = loglogis_SG_tracer$tracer)
res
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
print(i)
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 10,
cb = loglogis_SG_tracer$tracer)
resrate
rate
rate(10)
rate(1)
rate(100)
sample(1)
sample(2)
sample(100)
sample
sample(5000)[1]
sample(5000)[1]
sample(5000)[1]
sample(5000)[1]
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N,
gamma = rate,
maxiter = 10,
N = 10,
cb = loglogis_SG_tracer$tracer)
res <- SG(initpar,
N = 10,
gamma = rate,
maxiter = 10,
cb = loglogis_SG_tracer$tracer)
res
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
print(grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3]))
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = 10,
gamma = rate,
maxiter = 10,
cb = loglogis_SG_tracer$tracer)
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
print(grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3]))
print(X[i])
print(Y[i])
}
}
par
}
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = 10,
gamma = rate,
maxiter = 10,
cb = loglogis_SG_tracer$tracer)
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3])
print(grad_calc(X[i], Y[i], par[0], par[1], par[2], par[3]))
print(X[i])
print(Y[i])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = 1,
gamma = rate,
maxiter = 1,
cb = loglogis_SG_tracer$tracer)
initpar[0]
initpar[1]
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[1], par[2], par[3], par[4])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = 1,
gamma = rate,
maxiter = 1,
cb = loglogis_SG_tracer$tracer)
res
loglogis_SG_tracer
summary(loglogis_SG_tracer)
# Batch stochastic gradient algorithm
# Simulation
N <- 5000
X <- rnorm(N, mean = 0, sd = omega)
epsilon <- rnorm(N, mean = 0, sd = sigma)
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
SG <- function(
par,
N,
gamma,
maxiter = 100,
sampler = sample,
cb = NULL,
...
){
gamma <- if(is.function(gamma))gamma(1:maxiter) else rep(gamma, maxiter)
for (k in 1:maxiter){
if(!is.null(cb)) cb()
samp <- sampler(N)
for (j in 1:N){
i <- samp[j]
par <- par - gamma[k] * grad_calc(X[i], Y[i], par[1], par[2], par[3], par[4])
}
}
par
}
# Tracing
loglogis_SG_tracer <- tracer("par", N = 0)
res <- SG(initpar,
N = N,
gamma = rate,
cb = loglogis_SG_tracer$tracer)
summary(loglogis_SG_tracer)
