(crossprod(d * g_a,  g_a) +
4 * crossprod(d * g_ab_mid, g_ab_mid) +
crossprod(d * g_b, g_b)) / 6
}
Omega <- pen_mat(seq(0,1,0.1))
Omega
image(matrix(Omega))
library(Matrix)
Omega <- pen_mat(seq(0,1,0.1))
image(Matrix(Omega))
B_splines
B_splines(horse_data$Temperature)
Temperature
horse_data
quantile(horse_data$Temperature)
quantile(na.rm(horse_data$Temperature))
quantile(horse_data$Temperature, na.rm = T)
#Penalization implementation
knots <- c(37.4, 37.8, 38.2)
?bs()
B_plines <- bs(horse_data$Temperature, knots = knots)
B_plines <- bs(horse_data$Temperature, knots = horse_knots)
#Penalization implementation
horse_knots <- c(37.4, 37.8, 38.2)
B_plines <- bs(horse_data$Temperature, knots = horse_knots)
B_plines
B_plines <- bs(horse_data$Temperature, knots = horse_knots)
pen_mat <- function(inner_knots) {
knots <- sort(c(rep(range(inner_knots), 3), inner_knots))
d <- diff(inner_knots)  # The vector of knot differences; b - a
g_ab <- splineDesign(knots, inner_knots, derivs = 2)
knots_mid <- inner_knots[-length(inner_knots)] + d / 2
g_ab_mid <- splineDesign(knots, knots_mid, derivs = 2)
g_a <- g_ab[-nrow(g_ab), ]
g_b <- g_ab[-1, ]
(crossprod(d * g_a,  g_a) +
4 * crossprod(d * g_ab_mid, g_ab_mid) +
crossprod(d * g_b, g_b)) / 6
}
Omega <- pen_mat(seq(0,1,0.1))
image(Matrix(Omega))
Omega <- pen_mat(knots)
image(Matrix(Omega))
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
horse_missing
rm(list= ls())
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
#Number of observations
N <- 1000
alpha <- 0.5
beta <- 0.3
gamma <- 0.1
rho <- 1.5
#Density
densY <- function(x, alpha, beta, gamma, rho)
e^2
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha))
}
sigma <- 2
epsilon <- rnorm(N, mean = 0, sd = sigma)
ggplot()epsilon
epsilon
epsilon
plot(epsilon)
hist(epsilon)
omega <- 5
X <- rnorm(N, mean = 0, sd = omega)
hist(X)
sigma <- 4
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rnorm(N, mean = 0, sd = omega)
hist(X)
X <- rnorm(N, mean = 0, sd = omega)
hist(X)
#True parameters
alpha <- 0.5
beta <- 0.3
gamma <- 0.1
rho <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0)
rm(list = ls())
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha))
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 4
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0 )
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
Y
X[1000]
densY(X[1000], alpha0, beta0, gamma0, rho0)
X <- rlnorm(N, mean = 0, sd = omega)
X
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0)
Y
Y
hist(Y)
hist()
hist(X)
hist(log(X))
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is lognormal
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 4
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
Y
hist(Y)
hist(densY(X, alpha0, beta0, gamma0, rho0))
dens(densY(X, alpha0, beta0, gamma0, rho0))
density(densY(X, alpha0, beta0, gamma0, rho0))
plot(density(densY(X, alpha0, beta0, gamma0, rho0)))
plot(density(Y))
sigma <- 0.5
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
Y
dens(Y)
density(Y)
density(Y) %>% plot()
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha)))
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha)))
out <- return c(grad_alpha)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha)))
out <- c(grad_alpha)
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha)))
out <- c(grad_alpha)
return out
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha)))
c(grad_alpha)
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
c(grad_alpha)
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
c(grad_alpha, grad_beta)
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
c(grad_alpha, grad_beta, grad_gamma)
}
grad(X, alpha0, beta0, gamma0, rho0)
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
grad(X, alpha0, beta0, gamma0, rho0)
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 0.5
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 2
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
Y
hist(y)
hist(Y)
plot(density(Y))
plot(density(X))
plot(density(log(X)))
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
rm(list = ls())
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 1000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
horse_data
?force
library(tidyverse)
ggplot2::theme_set(theme_bw())
library(microbenchmark)
library(profvis)
library(Rcpp)
library(splines)
library(xtable)
library(Matrix)
## Key-functions ##
#Density
densY <- function(x, alpha, beta, gamma, rho){
gamma + (rho-gamma)/(1+exp(beta*log(x)-alpha)) #Note that x is log-normal
}
#Gradient
grad <- function(x, alpha, beta, gamma, rho){
N <- length(x)
grad_alpha <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_beta <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
((gamma-rho)*log(x)*exp(beta*log(x)-alpha))/(exp(beta*log(x)-alpha)+1)^2)
grad_gamma <- 2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
(1/(1+exp(beta*log(x)-alpha))-1))
grad_rho <- -2/N*sum(Y-gamma+(gamma-rho)/(1+exp(beta*log(x)-alpha))*
1/(1+exp(beta*log(x)-alpha)))
c(grad_alpha, grad_beta, grad_gamma, grad_rho)
}
## Simuliation ##
#Number of observations
N <- 5000
sigma <- 0.2
epsilon <- rnorm(N, mean = 0, sd = sigma)
omega <- 0.5
X <- rlnorm(N, mean = 0, sd = omega)
#True parameters
alpha0 <- 0.5
beta0 <- 0.3
gamma0 <- 0.1
rho0 <- 1.5
# Y-values
Y <- densY(X, alpha0, beta0, gamma0, rho0) + epsilon
grad(X, alpha0, beta0, gamma0, rho0)
#Horsedata
horse_data <- readr::read_csv("4_Horses.csv", col_types = cols(dead = col_logical()))
horse_missing <- horse_data %>%
mutate(missing = ifelse(is.na(Temperature) == TRUE, TRUE,FALSE)) %>%
group_by(dead,missing) %>%
summarise(n = n())
Y
hist(Y)
rate <- decay_scheduler(gamma1 = 0.0004, K = 100)
decay_scheduler <- function(gamma1 = 1, a = 1, K = 1, gamma2, n1) {
force(a)
if (!missing(gamma2) && !missing(n1))
K <- n1^a * gamma2 / (gamma0 - gamma2)
b <- gamma1 * K
function(n) b / (K + n^a)
}
rate <- decay_scheduler(gamma1 = 0.0004, K = 100)
rate
beta <- vector("list", N)
beta
initpar <- c(1,-0.3, -0.2, 1,1)
beta[[1]] <- initpar
beta
beta[[1]]
initpar <- c(1,-0.3, -0.2, 1.1)
beta[[1]]
beta[[1]] <- initpar
beta[[1]]
initpar
beta
Y[1]
grad(X[1], alpha0, beta0, gamma0, rho0)
rate(1)*grad(X[1], alpha0, beta0, gamma0, rho0)
beta[[1]]-rate(1)*grad(X[1], alpha0, beta0, gamma0, rho0)
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
initpar <- c(0.5,0.3, 0.1, 1.5)
beta[[1]] <- initpar
initpar
for (i in 2:N){
beta[[i]] <- beta[[i-1]] - rate(i) * grad(X[i], alpha0, beta0, gamma0, rho0)
}
beta
